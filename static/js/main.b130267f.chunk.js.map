{"version":3,"sources":["components/App.jsx","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","styledNormalize","StyledBox","styled","div","Label","label","ErrorMessage","span","FormItem","field","icon","form","touched","errors","props","htmlFor","name","prefix","type","style","color","FormItemText","FormItemCheckbox","checked","value","href","validationSchema","Yup","shape","max","required","password","matches","repeatPassword","oneOf","email","website","url","age","min","skills","of","acceptTerms","FIELDS","id","App","initialValues","onSubmit","values","actions","console","log","handleSubmit","isSubmitting","map","key","component","render","arrayHelpers","skill","index","onClick","push","margin","block","htmlType","disabled","marginBottom","defaultChecked","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b130267f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'antd/dist/antd.css';\nimport styledNormalize from 'styled-normalize';\nimport { createGlobalStyle } from 'styled-components';\nimport styled from 'styled-components/macro';\nimport { Input, Button, Icon, Checkbox } from 'antd';\nimport { Formik, Form, Field, FieldArray } from 'formik';\nimport * as Yup from 'yup';\n\nconst GlobalStyle = createGlobalStyle`\n  ${styledNormalize}\n  \n  body {\n    background-color: #0f8ee9;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n\n  img {\n    max-width: 100%;\n    height: auto;\n  }\n\n  ul,\n  ol,\n  li {\n    display: block;\n    padding: 0;\n    margin: 0;\n  }\n`;\n\nconst StyledBox = styled.div`\n  max-width: 440px;\n  padding: 40px 40px;\n  margin-top: 10px;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: #ffffff;\n  border-radius: 5px;\n  box-shadow: 0px 15px 35px rgba(0, 0, 0, 1);\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n  color: #0f8ee9;\n`;\n\nconst ErrorMessage = styled.span`\n  color: red;\n`;\n\nconst FormItem = ({ field, label, icon, form: { touched, errors }, ...props }) => (\n  <>\n    <li>\n      <Label htmlFor={field.name}>{label}:</Label>\n      <Input\n        {...field}\n        {...props}\n        prefix={<Icon type={icon} style={{ color: 'rgba(0,0,0,.25)' }} />}\n      />\n      {touched[field.name] && errors[field.name] && (\n        <ErrorMessage>{errors[field.name]}</ErrorMessage>\n      )}\n    </li>\n  </>\n);\n\nconst FormItemText = ({ field, form: { touched, errors }, ...props }) => (\n  <>\n    <li>\n      <Label htmlFor={field.name}>Знание:</Label>\n      <Input\n        type=\"text\"\n        {...field}\n        {...props}\n        prefix={<Icon type=\"star\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n      />\n      {touched[field.name] && errors[field.name] && (\n        <ErrorMessage>{errors[field.name]}</ErrorMessage>\n      )}\n    </li>\n  </>\n);\n\nconst FormItemCheckbox = ({ field, form: { touched, errors }, ...props }) => (\n  <>\n    <li>\n      <Checkbox {...field} {...props} checked={field.value}>\n        Принять <a href=\"https://jaredpalmer.com/formik\">условия пользовательского соглашения</a>\n      </Checkbox>\n      {touched[field.name] && errors[field.name] && (\n        <ErrorMessage>{errors[field.name]}</ErrorMessage>\n      )}\n    </li>\n  </>\n);\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Не более 50 символов')\n    .required('Обязательное поле'),\n  password: Yup.string()\n    .matches(\n      /^(?=^.{8,40}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z]).*$/,\n      'Пароль должен содержать символы A-Z, a-z, 0-9'\n    )\n    .required('Обязательное поле'),\n  repeatPassword: Yup.string()\n    .oneOf([Yup.ref('password')], 'Пароли не совпадает')\n    .required('Обязательное поле'),\n  email: Yup.string()\n    .email('Неккоректный Email-адрес ')\n    .required('Обязательное поле'),\n  website: Yup.string().url('Неккоректный URL-адрес'),\n  age: Yup.number()\n    .min(18, 'Возраст меньше 18')\n    .max(65, 'Возраст больше 65')\n    .required('Обязательное поле'),\n  skills: Yup.array().of(Yup.string()),\n  acceptTerms: Yup.boolean().oneOf([true], 'Соглашение с условиями обязательно'),\n});\n\nconst FIELDS = [\n  {\n    id: 'name',\n    name: 'name',\n    label: 'Имя',\n    type: 'user',\n    icon: 'user',\n  },\n  {\n    id: 'password',\n    name: 'password',\n    label: 'Пароль',\n    type: 'password',\n    icon: 'lock',\n  },\n  {\n    id: 'repeatPassword',\n    name: 'repeatPassword',\n    label: 'Повторите пароль',\n    type: 'password',\n    icon: 'lock',\n  },\n  {\n    id: 'email',\n    name: 'email',\n    label: 'Электронная почта',\n    type: 'email',\n    icon: 'mail',\n  },\n  {\n    id: 'website',\n    name: 'website',\n    label: 'Веб-сайт',\n    type: 'text',\n    icon: 'link',\n  },\n  {\n    id: 'age',\n    name: 'age',\n    label: 'Возраст',\n    type: 'number',\n    icon: 'idcard',\n  },\n];\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <GlobalStyle />\n        <StyledBox>\n          <Formik\n            initialValues={{\n              name: 'Ноунейм',\n              password: '88D8gdg88',\n              repeatPassword: '88D8gdg88',\n              email: 'noname@gmail.com',\n              website: 'http://www.noname.com',\n              age: 18,\n              skills: ['HTML'],\n              acceptTerms: true,\n            }}\n            onSubmit={(values, actions) => console.log('submit!', values, actions)}\n            validationSchema={validationSchema}\n          >\n            {({ handleSubmit, isSubmitting, values }) => {\n              return (\n                <Form onSubmit={handleSubmit}>\n                  <ol>\n                    {FIELDS.map(({ id, name, label, type, icon }) => (\n                      <Field\n                        key={id}\n                        component={FormItem}\n                        id={id}\n                        name={name}\n                        label={label}\n                        type={type}\n                        icon={icon}\n                      />\n                    ))}\n                    <FieldArray\n                      name=\"skills\"\n                      render={arrayHelpers => (\n                        <>\n                          {values.skills.map((skill, index) => (\n                            <Field\n                              key={index}\n                              id={`skills[${index}]`}\n                              name={`skills[${index}]`}\n                              component={FormItemText}\n                            />\n                          ))}\n                          <li>\n                            <Button\n                              type=\"primary\"\n                              onClick={() => arrayHelpers.push('')}\n                              style={{ margin: '20px 0' }}\n                              block\n                            >\n                              Добавить ещё навык\n                            </Button>\n                          </li>\n                        </>\n                      )}\n                    />\n                    <li>\n                      <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        disabled={isSubmitting}\n                        style={{ marginBottom: ' 20px' }}\n                        block\n                      >\n                        Регистрация\n                      </Button>\n                    </li>\n                    <Field\n                      name=\"acceptTerms\"\n                      defaultChecked={values.acceptTerms}\n                      component={FormItemCheckbox}\n                    />\n                  </ol>\n                </Form>\n              );\n            }}\n          </Formik>\n        </StyledBox>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}