{"version":3,"sources":["components/App.jsx","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","styledNormalize","StyledBox","styled","div","FormList","ol","Label","label","ErrorMessage","span","FormItem","field","icon","form","touched","errors","props","htmlFor","name","prefix","type","style","color","validationSchema","Yup","shape","max","required","password","matches","repeatPassword","oneOf","email","website","url","age","min","FIELDS","id","App","initialValues","onSubmit","values","actions","console","log","handleSubmit","isSubmitting","map","key","component","htmlType","disabled","block","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c77b5ba2.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport 'antd/dist/antd.css';\nimport styledNormalize from 'styled-normalize';\nimport { createGlobalStyle } from 'styled-components';\nimport styled from 'styled-components/macro';\nimport { Input, Button, Icon } from 'antd';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nconst GlobalStyle = createGlobalStyle`\n  ${styledNormalize}\n  \n  body {\n    background-color: #0f8ee9;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n\n  img {\n    max-width: 100%;\n    height: auto;\n  }\n\n  ul,\n  ol,\n  li {\n    display: block;\n    padding: 0;\n    margin: 0;\n  }\n`;\n\nconst StyledBox = styled.div`\n  max-width: 400px;\n  padding: 40px 40px;\n  margin-top: 10px;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: #ffffff;\n  border-radius: 5px;\n  box-shadow: 0px 15px 35px rgba(0, 0, 0, 1);\n`;\n\nconst FormList = styled.ol`\n  margin-bottom: 20px;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n  color: #0f8ee9;\n`;\n\nconst ErrorMessage = styled.span`\n  color: red;\n`;\n\nconst FormItem = ({ field, label, icon, form: { touched, errors }, ...props }) => (\n  <>\n    <li>\n      <Label htmlFor={field.name}>{label}:</Label>\n      <Input {...field} {...props} prefix={<Icon type={icon} style={{ color: 'rgba(0,0,0,.25)' }} />} />\n      {touched[field.name] && errors[field.name] && (\n        <ErrorMessage>{errors[field.name]}</ErrorMessage>\n      )}\n    </li>\n  </>\n);\n\nconst validationSchema = Yup.object().shape({\n  name: Yup\n    .string()\n    .max(50, 'Не более 50 символов')\n    .required('Обязательное поле'),\n  password: Yup\n    .string()\n    .matches(\n      /^(?=^.{8,40}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z]).*$/,\n      'Пароль должен содержать символы A-Z, a-z, 0-9'\n      )\n    .required('Обязательное поле'),\n  repeatPassword: Yup\n    .string()\n    .oneOf([Yup.ref('password')], 'Пароли не совпадает')\n    .required('Обязательное поле'),\n  email: Yup\n    .string()\n    .email('Неккоректный Email-адрес ')\n    .required('Обязательное поле'),\n  website: Yup\n    .string()\n    .url('Неккоректный URL-адрес'),\n  age: Yup\n    .number()\n    .min(18, 'Возраст меньше 18')\n    .max(65, 'Возраст больше 65')\n    .required('Обязательное поле')\n});\n\nconst FIELDS = [\n  {\n    id: 'name',\n    name: 'name',\n    label: 'Имя',\n    type:'user',\n    icon: 'user',\n  },\n  {\n    id: 'password',\n    name: 'password',\n    label: 'Пароль',\n    type:'password',\n    icon: 'lock',\n  },\n  {\n    id: 'repeatPassword',\n    name: 'repeatPassword',\n    label: 'Повторите пароль',\n    type:'password',\n    icon: 'lock',\n  },\n  {\n    id: 'email',\n    name: 'email',\n    label: 'Электронная почта',\n    type:'email',\n    icon: 'mail'\n  },\n  {\n    id: 'website',\n    name: 'website',\n    label: 'Веб-сайт',\n    type:'text',\n    icon: 'link'\n  },\n  {\n    id: 'age',\n    name: 'age',\n    label: 'Возраст',\n    type:'number',\n    icon: 'idcard'\n  },\n]\n\nclass App extends PureComponent {\n  render() {\n    return (\n      <>\n        <GlobalStyle />\n        <StyledBox>\n          <Formik\n            initialValues={{ \n              name: 'Ноунейм', \n              password: '88D8gdg88', \n              repeatPassword: '88D8gdg88', \n              email: 'noname@gmail.com', \n              website: 'http://www.noname.com',\n              age: 18\n            }}\n            onSubmit={(values, actions) => console.log('submit!', values, actions)}\n            validationSchema={validationSchema}\n          >\n            {({ handleSubmit, isSubmitting }) => {\n              return (\n                <Form onSubmit={handleSubmit}>\n                  <FormList>\n                    {FIELDS.map(({ id, name, label, type, icon }) => (\n                      <Field \n                        key={id}\n                        component={FormItem} \n                        id={id}\n                        name={name}\n                        label={label} \n                        type={type} \n                        icon={icon}\n                      />\n                    ))}\n                  </FormList>\n                  <Button type=\"primary\" htmlType=\"submit\" disabled={isSubmitting} block>\n                    Регистрация\n                  </Button>\n                </Form>\n              );\n            }}\n          </Formik>\n        </StyledBox>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}